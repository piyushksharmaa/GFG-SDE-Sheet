Approach: You have to visualise in it.

At first, what i was doing is to make max_x, max_y, curr_x and curr_y.
And then, updating like this that if at any point my max_x is greater or equal than m then i will return 0
But, here i was missing one point that

Let's say this test case LRR and n=2 and m=3

So, in each step my curr_x would be 
1-> -1
2-> 0
3-> 1

And, max_x would be 1 at max 
and we would return 1

But this is wrong as we can't do this in a 2x2 matrix

Then, i realised to find actual total coverage it is doing we need to do something like this that 

(max_r + (-max_l)) this would give me area coverage we are doing in x direction.
(max_u + (-max_d)) this would give me area coverage we are doing in y direction.

And, this we should check whether it is less than m or n for respective directions.

Now, how to calculate max_r, max_l, etc.

max_r=max(max_x,curr_x)
max_l=min(max_l,curr_x)

Here, one thing to notice is that max_l will not get updated until curr_x is positive. And, yeah reason is quite obvious that curr_x is still compensating the right it has
moved.

class Solution{
public:
    int isPossible(int n, int m, string s){
        // code here
        int max_l=0;
        int max_r=0;
        int max_u=0;
        int max_d=0;
        int curr_x=0;
        int curr_y=0;
        int sz=s.size();
        for(int i=0;i<sz;i++){
            if(s[i]=='R'){
                curr_x++;
            }
            if(s[i]=='L'){
                curr_x--;
            }
            if(s[i]=='U'){
                curr_y++;
            }
            if(s[i]=='D'){
                curr_y--;
            }
            max_r=max(max_r,curr_x);
            max_l=min(max_l,curr_x);
            max_u=max(max_u,curr_y);
            max_d=min(max_d,curr_y);
        }
        if((max_r-max_l<m) and (max_u-max_d<n)){
            return 1;
        }
        return 0;
    }
};
